SubDir HAIKU_TOP src kits package ;

UseHeaders $(HAIKU_ZLIB_HEADERS) : true ;

UsePrivateHeaders
	kernel
	shared ;

SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src kits package hpkg ] ;
SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src kits package solver ] ;

HPKG_SOURCES =
	AttributeDataReader.cpp
	BlockBufferCache.cpp
	BlockBufferCacheImpl.cpp
	BufferCache.cpp
	CachedBuffer.cpp
	DataOutput.cpp
	DataReader.cpp
	ErrorOutput.cpp
	FDDataReader.cpp
	PackageContentHandler.cpp
	PackageData.cpp
	PackageDataReader.cpp
	PackageEntry.cpp
	PackageEntryAttribute.cpp
	PackageReader.cpp
	PackageReaderImpl.cpp
	PackageWriter.cpp
	PackageWriterImpl.cpp
	ReaderImplBase.cpp
	RepositoryReader.cpp
	RepositoryReaderImpl.cpp
	RepositoryWriter.cpp
	RepositoryWriterImpl.cpp
	Strings.cpp
	WriterImplBase.cpp

	# compression
	ZlibCompressionBase.cpp
	ZlibCompressor.cpp
	ZlibDecompressor.cpp
	;

Includes [ FGristFiles $(HPKG_SOURCES) ]
	: $(HAIKU_ZLIB_HEADERS_DEPENDENCY) ;

SharedLibrary libpackage.so
	:
	ActivateRepositoryCacheJob.cpp
	ActivateRepositoryConfigJob.cpp
	ActivationTransaction.cpp
	AddRepositoryRequest.cpp
	Attributes.cpp
	BlockBufferCacheNoLock.cpp
	ChecksumAccessors.cpp
	Context.cpp
	DaemonClient.cpp
	DownloadFileRequest.cpp
	DropRepositoryRequest.cpp
	FetchFileJob.cpp
	InstallationLocationInfo.cpp
	Job.cpp
	JobQueue.cpp
	PackageInfo.cpp
	PackageInfoContentHandler.cpp
	PackageInfoSet.cpp
	PackageResolvable.cpp
	PackageResolvableExpression.cpp
	PackageRoster.cpp
	PackageVersion.cpp
	RefreshRepositoryRequest.cpp
	RemoveRepositoryJob.cpp
	RepositoryCache.cpp
	RepositoryConfig.cpp
	RepositoryInfo.cpp
	Request.cpp
	TempfileManager.cpp
	ValidateChecksumJob.cpp

	$(HPKG_SOURCES)

	# hpkg, but only libpackage
	NoErrorOutput.cpp
	StandardErrorOutput.cpp

	# solver
	Solver.cpp
	SolverPackage.cpp
	SolverPackageSpecifier.cpp
	SolverPackageSpecifierList.cpp
	SolverProblem.cpp
	SolverProblemSolution.cpp
	SolverRepository.cpp
	SolverResult.cpp
	:
	libshared.a be $(HAIKU_ZLIB_LIB) $(TARGET_LIBSTDC++)
;

HaikuSubInclude solver ;
